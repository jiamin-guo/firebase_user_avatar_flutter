import 'package:firebase_user_avatar_flutter/app/home/home_page.dart';
import 'package:firebase_user_avatar_flutter/app/sign_in/sign_in_page.dart';
import 'package:firebase_user_avatar_flutter/services/firebase_auth_service.dart';
import 'package:firebase_user_avatar_flutter/services/firebase_storage_service.dart';
import 'package:firebase_user_avatar_flutter/services/firestore_service.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

// Used to create user-dependent objects that need to be accessible by all widgets
// this widget should live above [MaterialApp].
// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder
// If the streambuilder lives above the material app, it won't be affected by navigation events
class AuthWidgetBuilder extends StatelessWidget {
  const AuthWidgetBuilder({Key key, @required this.builder}) : super(key: key);
  final Widget Function(BuildContext, AsyncSnapshot<User>) builder;
  @override
  Widget build(BuildContext context) {
    print('Auth Widget builder');
    // We don't want this to become a listener to this service
    final authService =
        Provider.of<FirebaseAuthService>(context, listen: false);

    // This stream builder rebuilds everything if the user changes
    return StreamBuilder<User>(
      builder: (context, snapshot) {
        print('Streambuilder: ${snapshot.connectionState}');
        final user = snapshot.data;
        // Use this to decide which page to show
        if (user != null) {
          return MultiProvider(
            providers: [
              Provider<User>(create: (_) => User(uid: user.uid)),
              Provider<FirebaseStorageService>(
                create: (_) => FirebaseStorageService(uid: user.uid),
              ),
              Provider<FirestoreService>(
                create: (_) => FirestoreService(uid: user.uid),
              ),
            ],
            child: builder(context, snapshot),
          );
        }
        return builder(context, snapshot);
      },
      stream: authService.onAuthStateChanged,
    );
  }
}
